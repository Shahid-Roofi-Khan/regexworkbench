{
    "cells": [
        {
            "language": "javascript",
            "source": [
                "// This module is built into the notebook. You do not need to install this.\r\n// You could install this to get code completion (i.e. intellisense).\r\n\r\nconst {display} = require('node-kernel');"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "# Plain text output"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "// Plain text outputs (boring, same as `console.log`)\r\ndisplay.text('Hello World');"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "# Markdown output"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "// Use javascript to generate a list of markdown bullet points.\r\nconst toc = ['Index', 'Getting Started', 'Help', 'Glossary'];\r\nconst items = toc.map(item => `* ${item}`).join('\\n');\r\ndisplay.markdown('# Markdown generated in js and displayed in notebooks\\n' + items);"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "# HTML & javascript outputs"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "// Rich HTML output.\r\nconst buttonText = 'Click me';\r\ndisplay.html(`\r\n    <button id='myButton'>${buttonText}</button>\r\n    <script type='text/javascript'>\r\n    (() => {\r\n        const btn = document.getElementById('myButton');\r\n        btn.addEventListener(\"click\", () => btn.innerText = 'You clicked the button');\r\n    })();\r\n    </script>\r\n`)"
            ],
            "outputs": []
        },
        {
            "language": "html",
            "source": [
                "<!-- HTML cells can be executed and displayed (even with javascript/css) -->\r\n<div>\r\n    This is plain HTML with some divs and buttons, make note of the language of this cell, its `HTML`.\r\n    <div id='myOutput' style='color:red; background-color: yellow; font-size: 2em;'></div><br>\r\n    <button id='anotherButton'>This is yet another button</button>\r\n</div>"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "// In node.js we can generate some JavaScript  that will interact with the above HTML.\r\ndisplay.javascript(`\r\n    document.getElementById('anotherButton').addEventListener(\"click\", () => {\r\n        console.log('Clicked another button');\r\n        document.getElementById('myOutput').innerHTML = 'You clicked the button';\r\n    });\r\n`);\r\n\r\n// Run this cell, and click the button in the previous cell."
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "# Images"
            ],
            "outputs": []
        },
        {
            "language": "shellscript",
            "source": [
                "# # First install node-fetch, if you don't already have it.\n# # Un comment the below line & run this cell.\n# npm i node-fetch"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "import * as fetch from 'node-fetch'"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "const svgImage = await fetch('https://nodejs.org/static/images/logo.svg').then(res => res.text());\r\nconsole.log(`svgImage is of type '${typeof svgImage}`);\r\nsvgImage\r\n\r\n// Note, you can switch the mime type and view the raw text representation of the content."
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "const res = await fetch('https://github.githubassets.com/images/modules/logos_page/Octocat.png');\r\nconst arrayBuffer = await res.arrayBuffer();\r\nconst buffer = Buffer.from(arrayBuffer)\r\nbuffer;\r\n\r\n// The format of the image is detected automatically and displayed in the output."
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "// Base64 encoded images are also understood and displayed as images instead of base64 string.\r\n// If you wish to have a look at the base64 string, you can switch the mime types from the image to text.\r\n\r\nconst base64String = buffer.toString('base64');\r\nconst encodedImages = `data:image/png;base64,${base64String}`;\r\nencodedImages"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "\r\nconst pattern = \"l\";\r\nconst inputstring = \"hellothereo\";\r\nconst switches = \"gi\"\r\n\r\nlet reg = new RegExp(pattern, switches);\r\n\r\nvar results = reg.exec(inputstring);\r\n\r\nconst tr = html => `<tr>${html}</tr>`;\r\nconst th = (arry, attrs) => arry.reduce((s, html) => s += `<th ${attrs || ''}>${html}</th>`, '');\r\nconst td = (arry, attrs) => arry.reduce((s, html) => s += `<td ${attrs || ''}>${html}</td>`, '');\r\n\r\nlet table = '<table class=\"ta\">';\r\ntable += tr(td(['Group', 'Span', 'Value'], 'class=\"bold\"'));\r\n\r\nlet matchIndex = 0;\r\nresults.forEach(e => {\r\n    table += tr(th([`Match ${matchIndex}`, `${e.index}-${e.index + e.length}`, e[0]]));\r\n\r\n    if (e.length > 0) {\r\n        let groupIndex = 1;\r\n        while (groupIndex < e.length) {\r\n            const g = e[groupIndex];\r\n            const title = 'name' in g\r\n                ? `Group ${groupIndex} (${g.name})`\r\n                : `Group ${groupIndex}`;\r\n\r\n            table += tr(td([title, `${g.start}-${g.end}`, g.match]));\r\n            groupIndex++;\r\n        }\r\n    }\r\n    matchIndex++;\r\n});\r\n\r\ntable += '</table>';\r\n\r\n\r\n"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stderr",
                            "value": [
                                "Debugger ending on ws://127.0.0.1:62652/a1411b38-b302-4d06-b4f0-671063802370\r",
                                ""
                            ]
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "\u001b[32m'<table class=\"ta\"><tr><td class=\"bold\">Group</td><td class=\"bold\">Span</td><td class=\"bold\">Value</td></tr><tr><th >Match 0</th><th >undefined-NaN</th><th >l</th></tr></table>'\u001b[39m"
                            ]
                        }
                    ]
                }
            ]
        }
    ]
}